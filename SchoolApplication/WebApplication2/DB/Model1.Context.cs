//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication2.DB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class schoolEntities3 : DbContext
    {
        public schoolEntities3()
            : base("name=schoolEntities3")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<attendance> attendances { get; set; }
        public virtual DbSet<@class> classes { get; set; }
        public virtual DbSet<Exammapping> Exammappings { get; set; }
        public virtual DbSet<feemapping> feemappings { get; set; }
        public virtual DbSet<Mark> Marks { get; set; }
        public virtual DbSet<payment> payments { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<student> students { get; set; }
        public virtual DbSet<subjectmapping> subjectmappings { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
        public virtual DbSet<credintial> credintials { get; set; }
        public virtual DbSet<exam> exams { get; set; }
        public virtual DbSet<subjectt> subjectts { get; set; }
    
        public virtual int createstudent(string sname, string fname, string phone, Nullable<System.DateTime> dateofbirth, Nullable<bool> gender, string address, byte[] photo, Nullable<System.DateTime> dateofjoing, Nullable<int> classid, string acadamicyear, Nullable<bool> isactive, Nullable<int> rid, string email, string password)
        {
            var snameParameter = sname != null ?
                new ObjectParameter("sname", sname) :
                new ObjectParameter("sname", typeof(string));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var dateofbirthParameter = dateofbirth.HasValue ?
                new ObjectParameter("dateofbirth", dateofbirth) :
                new ObjectParameter("dateofbirth", typeof(System.DateTime));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(bool));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("photo", photo) :
                new ObjectParameter("photo", typeof(byte[]));
    
            var dateofjoingParameter = dateofjoing.HasValue ?
                new ObjectParameter("dateofjoing", dateofjoing) :
                new ObjectParameter("dateofjoing", typeof(System.DateTime));
    
            var classidParameter = classid.HasValue ?
                new ObjectParameter("classid", classid) :
                new ObjectParameter("classid", typeof(int));
    
            var acadamicyearParameter = acadamicyear != null ?
                new ObjectParameter("acadamicyear", acadamicyear) :
                new ObjectParameter("acadamicyear", typeof(string));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var ridParameter = rid.HasValue ?
                new ObjectParameter("rid", rid) :
                new ObjectParameter("rid", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createstudent", snameParameter, fnameParameter, phoneParameter, dateofbirthParameter, genderParameter, addressParameter, photoParameter, dateofjoingParameter, classidParameter, acadamicyearParameter, isactiveParameter, ridParameter, emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<student> studentcreate(string sname, string fname, string phone, Nullable<System.DateTime> dateofbirth, Nullable<bool> gender, string address, byte[] photo, Nullable<System.DateTime> dateofjoing, Nullable<int> classid, string acadamicyear, Nullable<bool> isactive, Nullable<int> rid, string email, string password)
        {
            var snameParameter = sname != null ?
                new ObjectParameter("sname", sname) :
                new ObjectParameter("sname", typeof(string));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var dateofbirthParameter = dateofbirth.HasValue ?
                new ObjectParameter("dateofbirth", dateofbirth) :
                new ObjectParameter("dateofbirth", typeof(System.DateTime));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(bool));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("photo", photo) :
                new ObjectParameter("photo", typeof(byte[]));
    
            var dateofjoingParameter = dateofjoing.HasValue ?
                new ObjectParameter("dateofjoing", dateofjoing) :
                new ObjectParameter("dateofjoing", typeof(System.DateTime));
    
            var classidParameter = classid.HasValue ?
                new ObjectParameter("classid", classid) :
                new ObjectParameter("classid", typeof(int));
    
            var acadamicyearParameter = acadamicyear != null ?
                new ObjectParameter("acadamicyear", acadamicyear) :
                new ObjectParameter("acadamicyear", typeof(string));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var ridParameter = rid.HasValue ?
                new ObjectParameter("rid", rid) :
                new ObjectParameter("rid", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<student>("studentcreate", snameParameter, fnameParameter, phoneParameter, dateofbirthParameter, genderParameter, addressParameter, photoParameter, dateofjoingParameter, classidParameter, acadamicyearParameter, isactiveParameter, ridParameter, emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<student> studentcreate(string sname, string fname, string phone, Nullable<System.DateTime> dateofbirth, Nullable<bool> gender, string address, byte[] photo, Nullable<System.DateTime> dateofjoing, Nullable<int> classid, string acadamicyear, Nullable<bool> isactive, Nullable<int> rid, string email, string password, MergeOption mergeOption)
        {
            var snameParameter = sname != null ?
                new ObjectParameter("sname", sname) :
                new ObjectParameter("sname", typeof(string));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var dateofbirthParameter = dateofbirth.HasValue ?
                new ObjectParameter("dateofbirth", dateofbirth) :
                new ObjectParameter("dateofbirth", typeof(System.DateTime));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(bool));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("photo", photo) :
                new ObjectParameter("photo", typeof(byte[]));
    
            var dateofjoingParameter = dateofjoing.HasValue ?
                new ObjectParameter("dateofjoing", dateofjoing) :
                new ObjectParameter("dateofjoing", typeof(System.DateTime));
    
            var classidParameter = classid.HasValue ?
                new ObjectParameter("classid", classid) :
                new ObjectParameter("classid", typeof(int));
    
            var acadamicyearParameter = acadamicyear != null ?
                new ObjectParameter("acadamicyear", acadamicyear) :
                new ObjectParameter("acadamicyear", typeof(string));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var ridParameter = rid.HasValue ?
                new ObjectParameter("rid", rid) :
                new ObjectParameter("rid", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<student>("studentcreate", mergeOption, snameParameter, fnameParameter, phoneParameter, dateofbirthParameter, genderParameter, addressParameter, photoParameter, dateofjoingParameter, classidParameter, acadamicyearParameter, isactiveParameter, ridParameter, emailParameter, passwordParameter);
        }
    
        public virtual int createclass(string classname)
        {
            var classnameParameter = classname != null ?
                new ObjectParameter("classname", classname) :
                new ObjectParameter("classname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createclass", classnameParameter);
        }
    
        public virtual ObjectResult<@class> classcreate(string classname)
        {
            var classnameParameter = classname != null ?
                new ObjectParameter("classname", classname) :
                new ObjectParameter("classname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<@class>("classcreate", classnameParameter);
        }
    
        public virtual ObjectResult<@class> classcreate(string classname, MergeOption mergeOption)
        {
            var classnameParameter = classname != null ?
                new ObjectParameter("classname", classname) :
                new ObjectParameter("classname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<@class>("classcreate", mergeOption, classnameParameter);
        }
    }
}
